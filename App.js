import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View, Text } from 'react-native';
import Button from './Button';
import { useState } from 'react';
import Board from './Board';

export default function App() {
  const data = {
    empty: require('./assets/combinations/empty.png'),

    circle: require('./assets/combinations/circle.png'),
    hexagon: require('./assets/combinations/hexagon.png'),
    square: require('./assets/combinations/square.png'),
    triangle: require('./assets/combinations/triangle.png'),

    dice_value_1: require('./assets/combinations/1.png'),
    dice_value_2: require('./assets/combinations/2.png'),
    dice_value_3: require('./assets/combinations/3.png'),
    dice_value_4: require('./assets/combinations/4.png'),
    dice_value_5: require('./assets/combinations/5.png'),
    dice_value_6: require('./assets/combinations/6.png'),

    x: require('./assets/combinations/X.png')
  }

  const emptyCombinations = Array(16).fill('empty');
  const emptyDiceValues = Array(4).fill('empty');
  const [combinations, setCombinations] = useState([...emptyCombinations]);
  const [diceValues, setDiceValues] = useState([...emptyDiceValues]);

  function generatingPosition(numberOfTimes, orderArray, defaultPositionArray){
    const newPositionArray = Array(16).fill(0);
    for (let i = 0; i < numberOfTimes; i++) {
      for (let index = 0; index < orderArray.length; index++){
        const value =  defaultPositionArray[orderArray[index]];
        newPositionArray[index] = value;
      }
    }
    console.log(`newPositionArray: ${newPositionArray}`)
    return newPositionArray
  }

  function generatePosition() {
    //Generated by chatGPT
    const rightRotation = [12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3];
    const leftRotation = [3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12];
    const horizontalFlipped = [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12];
    const vertialFlipped = [12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3];

    //TODO: Default "X" values whereby each shape and X = X (20 combinations)
    let defaultPositionArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    const rotate = Math.floor(Math.random() * 8);

    const flipHorizontal = Math.floor(Math.random() * 2);
    const flipvertical = Math.floor(Math.random() * 2);
    console.log('===========================')
    if (rotate > 4) {
      defaultPositionArray = generatingPosition(rotate - 4, rightRotation, [...defaultPositionArray])
      console.log(`rotateRight: ${rotate - 4}`);
    }
    if (rotate < 3) {
      defaultPositionArray = generatingPosition(rotate + 1, leftRotation, [...defaultPositionArray])
      console.log(`rotateLeft: ${rotate + 1}`);
    }
    else {
      console.log("don't rotate");
    }
    // defaultPositionArray = generatingPosition(flipHorizontal, horizontalFlipped, [...defaultPositionArray])
    // console.log(`flipHorizontal: ${flipHorizontal}`);
    // defaultPositionArray = generatingPosition(flipvertical, vertialFlipped, [...defaultPositionArray])
    // console.log(`flipvertical: ${flipvertical}`);
  }

  function randomNumber(values) {
    const index = Math.floor(Math.random() * values.length);
    const value = values[index];
    if (index != (values.length - 1)) {
      values[index] = values[values.length - 1];
    }
    values.pop();
    return [value, values]
  }

  function randomizeHandler() {
    let newCombinationArray = [...emptyCombinations];
    let newDiceValueArray = [...emptyDiceValues];

    let defaultPositionArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    generatePosition();
    let defaultColorArray = ['black', 'blue', 'green', 'red', 'white', 'yellow'];
    let defaultShapeArray = ['circle', 'hexagon', 'square', 'triangle'];
    let defaultDiceValueArray = ['1', '2', '3', '4', '5', '6'];

    let newPosition = 0, newColor = 'black', newShape = 'circle', newDiceValue = '1';

    for (let i = 0; i < 4; i++) {
      [newPosition, defaultPositionArray] = randomNumber(defaultPositionArray);
      [newColor, defaultColorArray] = randomNumber(defaultColorArray);
      [newShape, defaultShapeArray] = randomNumber(defaultShapeArray);
      [newDiceValue, defaultDiceValueArray] = randomNumber(defaultDiceValueArray);

      newCombinationArray[newPosition] = `${newColor}_${newShape}`;
      newDiceValueArray[i] = `dice_value_${newDiceValue}`;
    }

    [newPosition, _] = randomNumber(defaultPositionArray)
    newCombinationArray[newPosition] = `x`;

    setCombinations(newCombinationArray)
    setDiceValues(newDiceValueArray)
  }

  return (
    <View style={styles.container}>
      <StatusBar style="dark" />
      <Text style={styles.text}>Fan Made Final Combination Cards</Text>
      <Board data={data} combinations={combinations} diceValues={diceValues} />
      <Button style={styles.button} onPress={randomizeHandler}>
        Randomize
      </Button>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
  },
  text: {
    color: 'white',
    fontSize: 24,
    width: 250,
    textAlign: 'center',
    padding: 10,
    marginTop: 100,
  },
  image: {
    height: 350,
    width: 450,
    borderRadius: 20,
  },
  button: {
    flex: 1,
    alignSelf: "center",
    width: "50%",
  }
});
